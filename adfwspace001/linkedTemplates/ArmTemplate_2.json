{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfwspace001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dp203_dataflow_Dimensions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dp203_sqldb_customer",
								"type": "DatasetReference"
							},
							"name": "dp203SqldbCustomerStream"
						},
						{
							"dataset": {
								"referenceName": "dp203_sqldb_product",
								"type": "DatasetReference"
							},
							"name": "dp203SqldbProductStream"
						},
						{
							"dataset": {
								"referenceName": "dp203_sqldb_ProductModel",
								"type": "DatasetReference"
							},
							"name": "dp203SqldbProductModelStream"
						},
						{
							"dataset": {
								"referenceName": "dp203_sqldb_ProductCategory",
								"type": "DatasetReference"
							},
							"name": "dp203SqldbProductCategoryStream"
						},
						{
							"dataset": {
								"referenceName": "dp203_synapsedb_DimProduct",
								"type": "DatasetReference"
							},
							"name": "dp203SynapsedbProductStream"
						},
						{
							"dataset": {
								"referenceName": "dp203_synapsedb_MaxCustSK",
								"type": "DatasetReference"
							},
							"name": "GetMaxCustomerSK"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dp203_synapsedb_DimCustomer",
								"type": "DatasetReference"
							},
							"name": "dp203SynapsedbDimCustomer"
						},
						{
							"dataset": {
								"referenceName": "dp203_synapsedb_DimProduct",
								"type": "DatasetReference"
							},
							"name": "dp203SynapsedbProductSink"
						},
						{
							"name": "CachedMaxCustomerSK"
						}
					],
					"transformations": [
						{
							"name": "ProductJoinProductModel"
						},
						{
							"name": "JoinProductCategory"
						},
						{
							"name": "SelectColumnStream"
						},
						{
							"name": "surrogateKeyStream"
						},
						{
							"name": "selectColumns"
						},
						{
							"name": "customerSK"
						},
						{
							"name": "ProductAlreadyExists"
						},
						{
							"name": "deriveCustomerSK"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dp203SqldbCustomerStream",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dp203SqldbProductStream",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dp203SqldbProductModelStream",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dp203SqldbProductCategoryStream",
						"source(output(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductcategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> dp203SynapsedbProductStream",
						"source(output(",
						"          CustomerSK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ISNULL(MAX([CustomerSK]),0) as CustomerSK FROM [dbo].[DimCustomer]',",
						"     format: 'query',",
						"     staged: true) ~> GetMaxCustomerSK",
						"ProductAlreadyExists, dp203SqldbProductModelStream join(dp203SqldbProductStream@ProductModelID == dp203SqldbProductModelStream@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductJoinProductModel",
						"ProductJoinProductModel, dp203SqldbProductCategoryStream join(dp203SqldbProductStream@ProductCategoryID == dp203SqldbProductCategoryStream@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinProductCategory",
						"JoinProductCategory select(mapColumn(",
						"          ProductID,",
						"          ProductName = dp203SqldbProductStream@Name,",
						"          ProductCategoryID = dp203SqldbProductStream@ProductCategoryID,",
						"          ProductModelID = dp203SqldbProductModelStream@ProductModelID,",
						"          ProductModelName = dp203SqldbProductModelStream@Name,",
						"          ProductCategoryName = dp203SqldbProductCategoryStream@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnStream",
						"SelectColumnStream keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyStream",
						"dp203SqldbCustomerStream select(mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumns",
						"selectColumns keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> customerSK",
						"dp203SqldbProductStream, dp203SynapsedbProductStream exists(dp203SqldbProductStream@ProductID == dp203SynapsedbProductStream@ProductID,",
						"     negate:true,",
						"     broadcast: 'auto')~> ProductAlreadyExists",
						"customerSK derive(CustomerSK = CustomerSK + CachedMaxCustomerSK#outputs()[1].CustomerSK) ~> deriveCustomerSK",
						"deriveCustomerSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string,",
						"          SalesPerson as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerSK,",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     )) ~> dp203SynapsedbDimCustomer",
						"surrogateKeyStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductcategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductSK,",
						"          ProductID,",
						"          ProductModelID,",
						"          ProductcategoryID = ProductCategoryID,",
						"          ProductName,",
						"          ProductModelName,",
						"          ProductCategoryName",
						"     )) ~> dp203SynapsedbProductSink",
						"GetMaxCustomerSK sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          CustomerSK",
						"     )) ~> CachedMaxCustomerSK"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp203_dataflow_factsales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dp203_sqldb_SalesOrderDetail",
								"type": "DatasetReference"
							},
							"name": "dp203SqldbSalesOrderDetailStream"
						},
						{
							"dataset": {
								"referenceName": "dp203_sqldb_SalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "dp203SqldbSalesOrderHeaderStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dp203_synapsedb_factsales",
								"type": "DatasetReference"
							},
							"name": "dp203SynapsedbFactSales"
						}
					],
					"transformations": [
						{
							"name": "SalesOrderDetailJoinSalesOrderHeader"
						},
						{
							"name": "SelectColumnStream"
						},
						{
							"name": "deriveTotalAmount"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          SalesOrderID as integer,",
						"          OrderQty as integer,",
						"          UnitPrice as decimal(19,4),",
						"          OrderDate as timestamp,",
						"          CustomerID as integer,",
						"          TaxAmt as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dp203SqldbSalesOrderDetailStream",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dp203SqldbSalesOrderHeaderStream",
						"dp203SqldbSalesOrderDetailStream, dp203SqldbSalesOrderHeaderStream join(dp203SqldbSalesOrderDetailStream@SalesOrderID == dp203SqldbSalesOrderHeaderStream@SalesOrderID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SalesOrderDetailJoinSalesOrderHeader",
						"SalesOrderDetailJoinSalesOrderHeader select(mapColumn(",
						"          ProductID,",
						"          SalesOrderID = dp203SqldbSalesOrderDetailStream@SalesOrderID,",
						"          OrderQty,",
						"          UnitPrice,",
						"          OrderDate = dp203SqldbSalesOrderHeaderStream@OrderDate,",
						"          CustomerID = dp203SqldbSalesOrderHeaderStream@CustomerID,",
						"          TaxAmt = dp203SqldbSalesOrderHeaderStream@TaxAmt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnStream",
						"SelectColumnStream derive(TotalAmount = multiply(UnitPrice,OrderQty)) ~> deriveTotalAmount",
						"deriveTotalAmount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          SalesOrderID as integer,",
						"          CustomerID as integer,",
						"          OrderQty as integer,",
						"          UnitPrice as decimal(19,4),",
						"          OrderDate as timestamp,",
						"          TaxAmt as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          SalesOrderID,",
						"          CustomerID,",
						"          OrderQty,",
						"          UnitPrice,",
						"          OrderDate,",
						"          TaxAmt,",
						"          TotalAmount",
						"     )) ~> dp203SynapsedbFactSales"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp203_dataflow_log')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dp203_logdata_parquet",
								"type": "DatasetReference"
							},
							"name": "dp203ParquetLogStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dp203_synapsedb_logdata",
								"type": "DatasetReference"
							},
							"name": "dp203SynapsedbLogSink"
						}
					],
					"transformations": [
						{
							"name": "filterNullResourcegroup"
						},
						{
							"name": "SplitByResourceGroup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> dp203ParquetLogStream",
						"dp203ParquetLogStream filter(!isNull(Resourcegroup)) ~> filterNullResourcegroup",
						"filterNullResourcegroup split(equalsIgnoreCase(Resourcegroup,'app-grp'),",
						"     disjoint: false) ~> SplitByResourceGroup@(AppgrpStream, NonAppgrpStream)",
						"SplitByResourceGroup@AppgrpStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Correlationid,",
						"          Operationname,",
						"          Status,",
						"          Eventcategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby,",
						"          Resourcetype,",
						"          Resourcegroup,",
						"          Resource",
						"     )) ~> dp203SynapsedbLogSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp203_jsonarray_customer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dp203_customer_jsonarray",
								"type": "DatasetReference"
							},
							"name": "dp203JsonArrayStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dp203_synapsedb_customer",
								"type": "DatasetReference"
							},
							"name": "dp203InsertIntoSynapseDb"
						}
					],
					"transformations": [
						{
							"name": "dp203FlattenJsonArray"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as integer,",
						"          customername as string,",
						"          registered as boolean,",
						"          courses as string[],",
						"          details as (mobile as string, city as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> dp203JsonArrayStream",
						"dp203JsonArrayStream foldDown(unroll(courses, courses),",
						"     mapColumn(",
						"          customerid,",
						"          customername,",
						"          registered,",
						"          courses,",
						"          details",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> dp203FlattenJsonArray",
						"dp203FlattenJsonArray sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CompanyName as string,",
						"          SalesPerson as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = customerid,",
						"          CustomerName = customername,",
						"          Registered = registered,",
						"          Courses = courses,",
						"          Mobile = details.mobile,",
						"          City = details.city",
						"     )) ~> dp203InsertIntoSynapseDb"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp203_parquet_to_json_log')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dp203_logdata_parquet",
								"type": "DatasetReference"
							},
							"name": "dp203LogdataParquetStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dp203_logdata_json",
								"type": "DatasetReference"
							},
							"name": "dp203LogdataJsonStream"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> dp203LogdataParquetStream",
						"dp203LogdataParquetStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['log.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> dp203LogdataJsonStream"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp203_df1_sql_to_synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp203_dataflow_fastsales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp203_dataflow_factsales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dp203SqldbSalesOrderDetailStream": {},
									"dp203SqldbSalesOrderHeaderStream": {},
									"dp203SynapsedbFactSales": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "adls2_coredatapoc_linked_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "adfjobs"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp203_dataflow_factsales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp203_df2_sql_to_synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp203DataFlowDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp203_dataflow_Dimensions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dp203SqldbCustomerStream": {},
									"dp203SqldbProductStream": {},
									"dp203SqldbProductModelStream": {},
									"dp203SqldbProductCategoryStream": {},
									"dp203SynapsedbProductStream": {},
									"GetMaxCustomerSK": {},
									"dp203SynapsedbDimCustomer": {},
									"dp203SynapsedbProductSink": {},
									"CachedMaxCustomerSK": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "adls2_coredatapoc_linked_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "adfjobs"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp203_dataflow_Dimensions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp203_df4_parquet_json_synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp203ParquetToCsvToSynapse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp203_parquet_to_json_log",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dp203LogdataParquetStream": {},
									"dp203LogdataJsonStream": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dp203CopyJsonIntoSynapsedb",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "dp203ParquetToCsvToSynapse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "raw/json",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Correlationid']"
										},
										"sink": {
											"name": "Correlation id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Operationname']"
										},
										"sink": {
											"name": "Operation name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Status']"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Eventcategory']"
										},
										"sink": {
											"name": "Event category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Level']"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Subscription']"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Eventinitiatedby']"
										},
										"sink": {
											"name": "Event initiated by",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcetype']"
										},
										"sink": {
											"name": "Resource type",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcegroup']"
										},
										"sink": {
											"name": "Resource group",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resource']"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "dp203_logdata_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dp203_synapsedb_logdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp203_parquet_to_json_log')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp203_jsonarray_to_synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp203_jsonarray_to_synapse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp203_jsonarray_customer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dp203JsonArrayStream": {},
									"dp203InsertIntoSynapseDb": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "adls2_coredatapoc_linked_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "adfjobs"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp203_jsonarray_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp203_parquet_to_synapse_logdata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp203_parquet_to_synapse_log",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp203_dataflow_log",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dp203ParquetLogStream": {},
									"dp203SynapsedbLogSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "adls2_coredatapoc_linked_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "adfjobs"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp203_dataflow_log')]"
			]
		}
	]
}